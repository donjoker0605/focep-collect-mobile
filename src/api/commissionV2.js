// src/api/commissionV2.js
import axios from './axiosConfig';

/**
 * Service API pour les nouvelles fonctionnalit√©s de commission FOCEP v2
 * Int√©gration du syst√®me refactoris√© avec :
 * - Calcul commission hi√©rarchique (client ‚Üí collecteur ‚Üí agence)
 * - Syst√®me de r√©mun√©ration Vi vs S
 * - G√©n√©ration rapports Excel r√©els
 */

/**
 * Lance le calcul de commission complet pour un collecteur (NEW)
 * 
 * @param {Object} params
 * @param {string} params.collecteurId ID du collecteur
 * @param {string} params.dateDebut Date d√©but (YYYY-MM-DD)
 * @param {string} params.dateFin Date fin (YYYY-MM-DD)
 * @returns {Promise<Object>} R√©sultat complet avec d√©tail par client
 */
export const calculateCommissionsV2 = async ({ collecteurId, dateDebut, dateFin }) => {
  try {
    console.log('üì± API V2: POST /commission-remuneration/collecteur/calculer');
    const response = await axios.post(
      `/api/v2/commission-remuneration/collecteur/${collecteurId}/calculer`,
      null,
      {
        params: { dateDebut, dateFin }
      }
    );
    return response.data;
  } catch (error) {
    console.error('Erreur calcul commission v2:', error);
    throw error;
  }
};

/**
 * Lance la r√©mun√©ration d'un collecteur (NEW)
 * 
 * @param {Object} params
 * @param {string} params.collecteurId ID du collecteur
 * @param {number} params.montantS Montant S (somme commissions)
 * @returns {Promise<Object>} R√©sultat r√©mun√©ration avec d√©tail Vi
 */
export const processRemuneration = async ({ collecteurId, montantS }) => {
  try {
    console.log('üì± API V2: POST /commission-remuneration/collecteur/remunerer');
    const response = await axios.post(
      `/api/v2/commission-remuneration/collecteur/${collecteurId}/remunerer`,
      null,
      {
        params: { montantS }
      }
    );
    return response.data;
  } catch (error) {
    console.error('Erreur r√©mun√©ration:', error);
    throw error;
  }
};

/**
 * Processus complet : Commission + R√©mun√©ration en une seule API (NEW)
 * 
 * @param {Object} params
 * @param {string} params.collecteurId ID du collecteur
 * @param {string} params.dateDebut Date d√©but (YYYY-MM-DD)
 * @param {string} params.dateFin Date fin (YYYY-MM-DD)
 * @returns {Promise<Object>} R√©sultat consolid√© commission + r√©mun√©ration
 */
export const processusComplet = async ({ collecteurId, dateDebut, dateFin }) => {
  try {
    console.log('üì± API V2: POST /commission-remuneration/processus-complet');
    const response = await axios.post(
      `/api/v2/commission-remuneration/collecteur/${collecteurId}/processus-complet`,
      null,
      {
        params: { dateDebut, dateFin }
      }
    );
    return response.data;
  } catch (error) {
    console.error('Erreur processus complet:', error);
    throw error;
  }
};

/**
 * G√©n√®re et t√©l√©charge le rapport Excel de commission (NEW)
 * 
 * @param {Object} params
 * @param {string} params.collecteurId ID du collecteur
 * @param {string} params.dateDebut Date d√©but (YYYY-MM-DD)
 * @param {string} params.dateFin Date fin (YYYY-MM-DD)
 * @returns {Promise<Blob>} Fichier Excel
 */
export const generateCommissionExcelReport = async ({ collecteurId, dateDebut, dateFin }) => {
  try {
    console.log('üì± API V2: POST /commission-remuneration/rapport-commission Excel');
    const response = await axios.post(
      `/api/v2/commission-remuneration/collecteur/${collecteurId}/rapport-commission`,
      null,
      {
        params: { dateDebut, dateFin },
        responseType: 'blob'
      }
    );
    return response.data;
  } catch (error) {
    console.error('Erreur g√©n√©ration rapport Excel commission:', error);
    throw error;
  }
};

/**
 * G√©n√®re et t√©l√©charge le rapport Excel de r√©mun√©ration (NEW)
 * 
 * @param {Object} params
 * @param {string} params.collecteurId ID du collecteur
 * @param {string} params.dateDebut Date d√©but (YYYY-MM-DD)
 * @param {string} params.dateFin Date fin (YYYY-MM-DD)
 * @returns {Promise<Blob>} Fichier Excel
 */
export const generateRemunerationExcelReport = async ({ collecteurId, dateDebut, dateFin }) => {
  try {
    console.log('üì± API V2: POST /commission-remuneration/rapport-remuneration Excel');
    const response = await axios.post(
      `/api/v2/commission-remuneration/collecteur/${collecteurId}/rapport-remuneration`,
      null,
      {
        params: { dateDebut, dateFin },
        responseType: 'blob'
      }
    );
    return response.data;
  } catch (error) {
    console.error('Erreur g√©n√©ration rapport Excel r√©mun√©ration:', error);
    throw error;
  }
};

/**
 * R√©cup√®re le statut des commissions d'un collecteur (NEW)
 * 
 * @param {Object} params
 * @param {string} params.collecteurId ID du collecteur
 * @returns {Promise<Object>} Statut et informations collecteur
 */
export const getCollecteurCommissionStatus = async ({ collecteurId }) => {
  try {
    console.log('üì± API V2: GET /commission-remuneration/statut');
    const response = await axios.get(
      `/api/v2/commission-remuneration/collecteur/${collecteurId}/statut`
    );
    return response.data;
  } catch (error) {
    console.error('Erreur r√©cup√©ration statut:', error);
    throw error;
  }
};

/**
 * GESTION DES RUBRIQUES DE R√âMUN√âRATION
 */

/**
 * R√©cup√®re les rubriques actives pour un collecteur
 * 
 * @param {Object} params
 * @param {string} params.collecteurId ID du collecteur
 * @returns {Promise<Array>} Liste des rubriques
 */
export const getRubriquesRemuneration = async ({ collecteurId }) => {
  try {
    console.log('üì± API V2: GET /rubriques-remuneration/collecteur');
    const response = await axios.get(
      `/api/v2/rubriques-remuneration/collecteur/${collecteurId}`
    );
    return response.data;
  } catch (error) {
    console.error('Erreur r√©cup√©ration rubriques:', error);
    throw error;
  }
};

/**
 * Cr√©e une nouvelle rubrique de r√©mun√©ration
 * 
 * @param {Object} rubrique
 * @param {string} rubrique.nom Nom de la rubrique
 * @param {string} rubrique.type CONSTANT ou PERCENTAGE
 * @param {number} rubrique.valeur Valeur (montant ou pourcentage)
 * @param {string} rubrique.dateApplication Date d'application (YYYY-MM-DD)
 * @param {number} rubrique.delaiJours D√©lai en jours (optionnel)
 * @param {Array<number>} rubrique.collecteurIds IDs des collecteurs concern√©s
 * @returns {Promise<Object>} Rubrique cr√©√©e
 */
export const createRubriqueRemuneration = async (rubrique) => {
  try {
    console.log('üì± API V2: POST /rubriques-remuneration');
    const response = await axios.post('/api/v2/rubriques-remuneration', rubrique);
    return response.data;
  } catch (error) {
    console.error('Erreur cr√©ation rubrique:', error);
    throw error;
  }
};

/**
 * Met √† jour une rubrique de r√©mun√©ration
 * 
 * @param {Object} params
 * @param {number} params.rubriqueId ID de la rubrique
 * @param {Object} params.rubrique Donn√©es mises √† jour
 * @returns {Promise<Object>} Rubrique mise √† jour
 */
export const updateRubriqueRemuneration = async ({ rubriqueId, rubrique }) => {
  try {
    console.log('üì± API V2: PUT /rubriques-remuneration');
    const response = await axios.put(`/api/v2/rubriques-remuneration/${rubriqueId}`, rubrique);
    return response.data;
  } catch (error) {
    console.error('Erreur mise √† jour rubrique:', error);
    throw error;
  }
};

/**
 * D√©sactive une rubrique de r√©mun√©ration
 * 
 * @param {Object} params
 * @param {number} params.rubriqueId ID de la rubrique
 * @returns {Promise<Object>} R√©sultat de l'op√©ration
 */
export const deactivateRubriqueRemuneration = async ({ rubriqueId }) => {
  try {
    console.log('üì± API V2: DELETE /rubriques-remuneration');
    const response = await axios.delete(`/api/v2/rubriques-remuneration/${rubriqueId}`);
    return response.data;
  } catch (error) {
    console.error('Erreur d√©sactivation rubrique:', error);
    throw error;
  }
};

/**
 * UTILITAIRES
 */

/**
 * T√©l√©charge un fichier Blob (Excel) sur le device
 * 
 * @param {Blob} blob Fichier √† t√©l√©charger
 * @param {string} fileName Nom du fichier
 */
export const downloadExcelFile = async (blob, fileName) => {
  try {
    console.log(`üì± T√©l√©chargement: ${fileName} (${blob.size} bytes)`);
    
    // Import dynamique pour √©viter les erreurs de bundle
    const fileDownloader = await import('../utils/fileDownloader');
    const result = await fileDownloader.default.downloadExcelFile(blob, fileName);
    
    return {
      success: true,
      fileName,
      size: blob.size,
      downloadResult: result
    };
  } catch (error) {
    console.error('Erreur t√©l√©chargement Excel:', error);
    throw error;
  }
};

/**
 * Formate les donn√©es de commission pour l'affichage mobile
 * 
 * @param {Object} commissionResult R√©sultat du calcul de commission
 * @returns {Object} Donn√©es format√©es pour l'UI mobile
 */
export const formatCommissionDataForMobile = (commissionResult) => {
  if (!commissionResult || !commissionResult.commissionsClients) {
    return null;
  }

  return {
    collecteurId: commissionResult.collecteurId,
    periode: commissionResult.periode,
    totalCommissions: commissionResult.montantSCollecteur,
    totalTVA: commissionResult.totalTVA,
    nombreClients: commissionResult.commissionsClients.length,
    clients: commissionResult.commissionsClients.map(client => ({
      id: client.clientId,
      nom: client.clientNom,
      montantEpargne: client.montantEpargne,
      commission: client.commissionX,
      tva: client.tva,
      ancienSolde: client.ancienSolde,
      nouveauSolde: client.nouveauSolde,
      typeParametre: client.parameterUsed
    })),
    dateCalcul: commissionResult.dateCalcul
  };
};

/**
 * Formate les donn√©es de r√©mun√©ration pour l'affichage mobile
 * 
 * @param {Object} remunerationResult R√©sultat de la r√©mun√©ration
 * @returns {Object} Donn√©es format√©es pour l'UI mobile
 */
export const formatRemunerationDataForMobile = (remunerationResult) => {
  if (!remunerationResult) {
    return null;
  }

  return {
    collecteurId: remunerationResult.collecteurId,
    montantSInitial: remunerationResult.montantSInitial,
    totalRubriquesVi: remunerationResult.totalRubriqueVi,
    montantEMF: remunerationResult.montantEMF,
    nombreMovements: remunerationResult.mouvements?.length || 0,
    success: remunerationResult.success
  };
};