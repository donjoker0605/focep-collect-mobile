import BaseApiService from './base/BaseApiService';

class JournalService extends BaseApiService {
  constructor() {
    super();
  }

  // ‚úÖ NOUVELLE M√âTHODE PRINCIPALE: R√©cup√©ration automatique du journal du jour
  async getJournalDuJour(collecteurId, date = null) {
    try {
      const dateParam = date || new Date().toISOString().split('T')[0]; // Format YYYY-MM-DD
      console.log('üìÖ R√©cup√©ration journal du jour:', collecteurId, dateParam);
      
      const response = await this.axios.get(`/journaux/collecteur/${collecteurId}/jour`, {
        params: { date: dateParam }
      });
      
      return this.formatResponse(response, 'Journal du jour r√©cup√©r√©');
    } catch (error) {
      console.error('Erreur r√©cup√©ration journal du jour:', error);
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration du journal du jour');
    }
  }

  // ‚úÖ R√âCUP√âRATION DU JOURNAL ACTIF (AUJOURD'HUI)
  async getJournalActif(collecteurId) {
    try {
      console.log('üìÖ R√©cup√©ration journal actif pour collecteur:', collecteurId);
      
      const response = await this.axios.get(`/journaux/collecteur/${collecteurId}/actif`);
      return this.formatResponse(response, 'Journal actif r√©cup√©r√©');
    } catch (error) {
      console.error('Error fetching journal actif:', error);
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration du journal actif');
    }
  }

  // ‚úÖ CL√îTURE AUTOMATIQUE DU JOURNAL DU JOUR
  async cloturerJournalAujourdhui(collecteurId) {
    try {
      const dateAujourdhui = new Date().toISOString().split('T')[0];
      console.log('üîí Cl√¥ture journal du jour:', collecteurId, dateAujourdhui);
      
      const response = await this.axios.post(`/journaux/collecteur/${collecteurId}/cloture-jour`, {
        date: dateAujourdhui
      });
      
      return this.formatResponse(response, 'Journal du jour cl√¥tur√© avec succ√®s');
    } catch (error) {
      console.error('Erreur cl√¥ture journal du jour:', error);
      throw this.handleError(error, 'Erreur lors de la cl√¥ture du journal du jour');
    }
  }

  // ‚úÖ R√âCUP√âRATION DES MOUVEMENTS DU JOURNAL DU JOUR
  async getMouvementsJournalDuJour(collecteurId, date = null) {
    try {
      // 1. R√©cup√©rer le journal du jour
      const journalResponse = await this.getJournalDuJour(collecteurId, date);
      const journal = journalResponse.data;

      // 2. R√©cup√©rer les mouvements de ce journal
      const mouvementsResponse = await this.axios.get(`/mouvements/journal/${journal.id}`, {}, {
        useCache: true,
        maxAge: 5 * 60 * 1000 // 5 minutes de cache
      });

      return this.formatResponse(mouvementsResponse, 'Mouvements du jour r√©cup√©r√©s');
    } catch (error) {
      console.error('Erreur r√©cup√©ration mouvements du jour:', error);
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des mouvements du jour');
    }
  }

  // M√âTHODES EXISTANTES CONSERV√âES
  async createJournal(data) {
    try {
      const response = await this.axios.post('/journaux', {
        dateDebut: data.dateDebut,
        dateFin: data.dateFin,
        collecteurId: data.collecteurId,
      });
      return this.formatResponse(response, 'Journal cr√©√© avec succ√®s');
    } catch (error) {
      console.error('Error creating journal:', error);
      throw this.handleError(error, 'Erreur lors de la cr√©ation du journal');
    }
  }

  async getJournauxByCollecteur(collecteurId, dateDebut, dateFin) {
    try {
      const params = {};
      if (dateDebut) params.dateDebut = dateDebut;
      if (dateFin) params.dateFin = dateFin;
      
      const response = await this.axios.get(`/journaux/collecteur/${collecteurId}`, { params });
      return this.formatResponse(response, 'Journaux r√©cup√©r√©s');
    } catch (error) {
      console.error('Error fetching journaux:', error);
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des journaux');
    }
  }

  async getJournalById(journalId) {
    try {
      const response = await this.axios.get(`/journaux/${journalId}`);
      return this.formatResponse(response, 'Journal r√©cup√©r√©');
    } catch (error) {
      console.error('Error fetching journal details:', error);
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration du journal');
    }
  }

  async cloturerJournal(journalId) {
    try {
      const response = await this.axios.post(`/journaux/cloture?journalId=${journalId}`);
      return this.formatResponse(response, 'Journal cl√¥tur√© avec succ√®s');
    } catch (error) {
      console.error('Error closing journal:', error);
      throw this.handleError(error, 'Erreur lors de la cl√¥ture du journal');
    }
  }
}

export default new JournalService();