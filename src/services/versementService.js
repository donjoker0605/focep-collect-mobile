// src/services/versementService.js
import BaseApiService from './base/BaseApiService';

/**
 * üí∞ Service pour la gestion des versements et cl√¥tures de journaux
 */
class VersementService extends BaseApiService {
  constructor() {
    super();
  }

  /**
   * üìã Obtenir un aper√ßu avant cl√¥ture
   */
  async getCloturePreview(collecteurId, date) {
    try {
      console.log('üìã API: GET /admin/versements/preview');
      const params = new URLSearchParams({
        collecteurId: collecteurId.toString(),
        date: date
      });

      const response = await this.axios.get(`/admin/versements/preview?${params.toString()}`);
      return this.formatResponse(response, 'Aper√ßu g√©n√©r√© avec succ√®s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la g√©n√©ration de l\'aper√ßu');
    }
  }

  /**
   * üí∞ Effectuer le versement et cl√¥turer le journal
   */
  async effectuerVersementEtCloture(versementData) {
    try {
      console.log('üí∞ API: POST /admin/versements/cloture');
      const response = await this.axios.post('/admin/versements/cloture', versementData);
      return this.formatResponse(response, 'Versement effectu√© et journal cl√¥tur√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors du versement et de la cl√¥ture');
    }
  }

  /**
   * üìä R√©cup√©rer les comptes d'un collecteur
   */
  async getCollecteurComptes(collecteurId) {
    try {
      console.log('üìä API: GET /admin/versements/collecteur/comptes');
      const response = await this.axios.get(`/admin/versements/collecteur/${collecteurId}/comptes`);
      return this.formatResponse(response, 'Comptes r√©cup√©r√©s avec succ√®s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des comptes');
    }
  }

  /**
   * üìà R√©cup√©rer les statistiques des manquants d'un collecteur
   */
  async getManquantsStats(collecteurId) {
    try {
      console.log('üìà API: GET /admin/versements/collecteur/manquants');
      const response = await this.axios.get(`/admin/versements/collecteur/${collecteurId}/manquants`);
      return this.formatResponse(response, 'Statistiques manquants r√©cup√©r√©es');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des statistiques manquants');
    }
  }

  /**
   * üîç V√©rifier si une cl√¥ture est possible
   */
  async canCloseJournal(collecteurId, date) {
    try {
      console.log('üîç API: GET /admin/versements/can-close');
      const params = new URLSearchParams({
        collecteurId: collecteurId.toString(),
        date: date
      });

      const response = await this.axios.get(`/admin/versements/can-close?${params.toString()}`);
      return this.formatResponse(response, 'V√©rification effectu√©e');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la v√©rification');
    }
  }

  /**
   * üìÖ R√©cup√©rer l'historique des versements d'un collecteur
   */
  async getHistoriqueVersements(collecteurId, { page = 0, size = 20 } = {}) {
    try {
      console.log('üìÖ API: GET /admin/versements/historique');
      const params = new URLSearchParams({
        collecteurId: collecteurId.toString(),
        page: page.toString(),
        size: size.toString()
      });

      const response = await this.axios.get(`/admin/versements/historique?${params.toString()}`);
      return this.formatResponse(response, 'Historique r√©cup√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration de l\'historique');
    }
  }

  /**
   * üîÑ Annuler un versement (si autoris√©)
   */
  async annulerVersement(versementId, motif) {
    try {
      console.log('üîÑ API: POST /admin/versements/annuler');
      const response = await this.axios.post(`/admin/versements/${versementId}/annuler`, {
        motif
      });
      return this.formatResponse(response, 'Versement annul√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de l\'annulation du versement');
    }
  }

  /**
   * üìä R√©cup√©rer le dashboard des versements pour l'agence
   */
  async getDashboardVersements(agenceId = null, dateDebut = null, dateFin = null) {
    try {
      console.log('üìä API: GET /admin/versements/dashboard');
      const params = new URLSearchParams();
      
      if (agenceId) params.append('agenceId', agenceId.toString());
      if (dateDebut) params.append('dateDebut', dateDebut);
      if (dateFin) params.append('dateFin', dateFin);

      const response = await this.axios.get(`/admin/versements/dashboard?${params.toString()}`);
      return this.formatResponse(response, 'Dashboard r√©cup√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration du dashboard');
    }
  }

  /**
   * üìã R√©cup√©rer la liste des collecteurs avec manquants
   */
  async getCollecteursAvecManquants(agenceId = null) {
    try {
      console.log('üìã API: GET /admin/versements/collecteurs-manquants');
      const params = agenceId ? `?agenceId=${agenceId}` : '';
      
      const response = await this.axios.get(`/admin/versements/collecteurs-manquants${params}`);
      return this.formatResponse(response, 'Collecteurs avec manquants r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des collecteurs avec manquants');
    }
  }

  /**
   * üí≥ Effectuer un remboursement de manquant
   */
  async remboursementManquant(collecteurId, montant, commentaire = '') {
    try {
      console.log('üí≥ API: POST /admin/versements/remboursement-manquant');
      const response = await this.axios.post('/admin/versements/remboursement-manquant', {
        collecteurId,
        montant,
        commentaire
      });
      return this.formatResponse(response, 'Remboursement effectu√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors du remboursement');
    }
  }

  /**
   * üìà Obtenir les statistiques globales des manquants par agence
   */
  async getStatsManquantsAgence(agenceId = null) {
    try {
      console.log('üìà API: GET /admin/versements/stats-manquants-agence');
      const params = agenceId ? `?agenceId=${agenceId}` : '';
      
      const response = await this.axios.get(`/admin/versements/stats-manquants-agence${params}`);
      return this.formatResponse(response, 'Statistiques manquants agence r√©cup√©r√©es');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des statistiques');
    }
  }

  /**
   * üîß Utilitaire : Calculer la diff√©rence de versement
   */
  calculateDifference(montantCollecte, montantVerse) {
    const difference = montantVerse - montantCollecte;
    return {
      difference,
      type: difference > 0 ? 'excedent' : difference < 0 ? 'manquant' : 'equilibre',
      montant: Math.abs(difference),
      isExcedent: difference > 0,
      isManquant: difference < 0,
      isEquilibre: difference === 0
    };
  }

  /**
   * üîß Utilitaire : Formater un montant en devise
   */
  formatCurrency(amount) {
    if (!amount && amount !== 0) return '0 FCFA';
    return `${new Intl.NumberFormat('fr-FR').format(amount)} FCFA`;
  }

  /**
   * üîß Utilitaire : Valider les donn√©es de versement
   */
  validateVersementData(data) {
    const errors = [];

    if (!data.collecteurId) {
      errors.push('Le collecteur est obligatoire');
    }

    if (!data.date) {
      errors.push('La date est obligatoire');
    }

    if (!data.montantVerse && data.montantVerse !== 0) {
      errors.push('Le montant vers√© est obligatoire');
    }

    if (data.montantVerse < 0) {
      errors.push('Le montant vers√© ne peut pas √™tre n√©gatif');
    }

    if (data.commentaire && data.commentaire.length > 500) {
      errors.push('Le commentaire ne peut pas d√©passer 500 caract√®res');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * üéØ Helper pour les donn√©es de test/debug
   */
  getMockPreviewData() {
    return {
      collecteurId: 1,
      collecteurNom: "Jean Dupont",
      date: "2025-07-17",
      journalId: 123,
      referenceJournal: "JRN-001-20250717",
      journalExiste: true,
      dejaCl√¥ture: false,
      soldeCompteService: 125000,
      totalEpargne: 150000,
      totalRetraits: 25000,
      soldeNet: 125000,
      nombreOperations: 12,
      operations: [
        {
          id: 1,
          type: "EPARGNE",
          montant: 10000,
          clientNom: "Martin",
          clientPrenom: "Pierre",
          dateOperation: "2025-07-17T09:30:00"
        },
        {
          id: 2,
          type: "RETRAIT",
          montant: 5000,
          clientNom: "Durand",
          clientPrenom: "Marie",
          dateOperation: "2025-07-17T11:15:00"
        }
      ],
      soldeCompteManquant: 0,
      soldeCompteAttente: 2500
    };
  }
}

export default new VersementService();