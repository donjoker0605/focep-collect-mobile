import BaseApiService from './base/BaseApiService';

class TransactionService extends BaseApiService {
  constructor() {
    super();
  }

  // GARDER TOUTES VOS M√âTHODES EXISTANTES + AJOUTER NOUVELLES
  async enregistrerEpargne(data) {
    try {
      console.log('üì± API: POST /mouvements/epargne', data);
      const response = await this.axios.post('/mouvements/epargne', data);
      return this.formatResponse(response, '√âpargne enregistr√©e avec succ√®s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de l\'enregistrement de l\'√©pargne');
    }
  }

  async effectuerRetrait(data) {
    try {
      console.log('üì± API: POST /mouvements/retrait', data);
      const response = await this.axios.post('/mouvements/retrait', data);
      return this.formatResponse(response, 'Retrait effectu√© avec succ√®s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors du retrait');
    }
  }

  async getMouvementsByJournal(journalId) {
    try {
      console.log('üì± API: GET /mouvements/journal/', journalId);
      const response = await this.axios.get(`/mouvements/journal/${journalId}`);
      return this.formatResponse(response, 'Mouvements r√©cup√©r√©s');
    } catch (error) {
      return this.handleError(error, 'Erreur lors de la r√©cup√©ration des mouvements');
    }
  }

  async getTransactionsByCollecteur(collecteurId) {
    try {
      console.log('üì± API: GET /mouvements/collecteur/', collecteurId);
      const response = await this.axios.get(`/mouvements/collecteur/${collecteurId}`);
      return this.formatResponse(response, 'Transactions collecteur r√©cup√©r√©es');
    } catch (error) {
      return this.handleError(error, 'Erreur lors de la r√©cup√©ration des transactions');
    }
  }

  // NOUVELLE M√âTHODE POUR V√âRIFIER LE SOLDE
  async verifyBalance(data) {
    try {
      console.log('üì± API: POST /mouvements/verify-balance', data);
      const response = await this.axios.post('/mouvements/verify-balance', data);
      return this.formatResponse(response, 'Solde v√©rifi√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la v√©rification du solde');
    }
  }
}

export default new TransactionService();