// src/services/transactionService.js 
import BaseApiService from './base/BaseApiService';

class TransactionService extends BaseApiService {
  constructor() {
    super();
  }

  // M√âTHODE PRINCIPALE CORRIG√âE : R√©cup√©rer les d√©tails d'une transaction
  async getTransactionDetails(transactionId) {
    try {
      console.log('üîç API: GET /mouvements/', transactionId);
      const response = await this.axios.get(`/mouvements/${transactionId}`);
      return this.formatResponse(response, 'D√©tails de transaction r√©cup√©r√©s');
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration d√©tails transaction:', error);
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des d√©tails de la transaction');
    }
  }

  // M√âTHODE PRINCIPALE CORRIG√âE : R√©cup√©rer les transactions d'un client
  async getTransactionsByClient(clientId) {
    try {
      console.log('üìä API: GET /mouvements/client/', clientId);
      const response = await this.axios.get(`/mouvements/client/${clientId}`);
      return this.formatResponse(response, 'Transactions du client r√©cup√©r√©es');
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration transactions client:', error);
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des transactions du client');
    }
  }

  async getTransactionsByCollecteur(collecteurId, page = 0, size = 50) {
    try {
      console.log('üìä API: GET /mouvements/collecteur/', collecteurId);
      const params = { page, size };
      const response = await this.axios.get(`/mouvements/collecteur/${collecteurId}`, { params });
      return this.formatResponse(response, 'Transactions collecteur r√©cup√©r√©es');
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration transactions collecteur:', error);
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des transactions du collecteur');
    }
  }

  async fetchJournalTransactions({ collecteurId, date, page = 0, size = 20, sort = 'dateOperation,desc' }) {
    try {
      console.log('üìä API: GET /mouvements/journal/transactions');
      const params = { collecteurId, date, page, size, sort };
      
      const response = await this.axios.get('/mouvements/journal/transactions', { params });
      return this.formatResponse(response, 'Transactions du journal r√©cup√©r√©es');
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration transactions journal:', error);
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des transactions du journal');
    }
  }

  async verifyBalance({ clientId, montant }) {
    try {
      console.log('üí≥ API: POST /mouvements/verify-balance');
      const response = await this.axios.post('/mouvements/verify-balance', {
        clientId,
        montant
      });
      return this.formatResponse(response, 'Solde v√©rifi√©');
    } catch (error) {
      console.error('‚ùå Erreur v√©rification solde:', error);
      throw this.handleError(error, 'Erreur lors de la v√©rification du solde');
    }
  }

  async enregistrerEpargne(data) {
    try {
      console.log('üí∞ API: POST /mouvements/epargne', data);
      const response = await this.axios.post('/mouvements/epargne', data);
      return this.formatResponse(response, '√âpargne enregistr√©e avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur enregistrement √©pargne:', error);
      throw this.handleError(error, 'Erreur lors de l\'enregistrement de l\'√©pargne');
    }
  }

  async effectuerRetrait(data) {
    try {
      console.log('üèß API: POST /mouvements/retrait', data);
      const response = await this.axios.post('/mouvements/retrait', data);
      return this.formatResponse(response, 'Retrait effectu√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur effectuation retrait:', error);
      throw this.handleError(error, 'Erreur lors du retrait');
    }
  }

  async getMouvementsByJournal(journalId) {
    try {
      console.log('üìä API: GET /mouvements/journal/', journalId);
      const response = await this.axios.get(`/mouvements/journal/${journalId}`);
      return this.formatResponse(response, 'Mouvements du journal r√©cup√©r√©s');
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration mouvements journal:', error);
      return this.handleError(error, 'Erreur lors de la r√©cup√©ration des mouvements du journal');
    }
  }

  // NOUVELLES M√âTHODES UTILES
  async getOperationsDuJour(collecteurId, date = null) {
    try {
      const dateParam = date || new Date().toISOString().split('T')[0];
      console.log('üìÖ API: GET /mouvements/collecteur/{}/jour', collecteurId);
      
      const params = { date: dateParam };
      const response = await this.axios.get(`/mouvements/collecteur/${collecteurId}/jour`, { params });
      return this.formatResponse(response, 'Op√©rations du jour r√©cup√©r√©es');
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration op√©rations du jour:', error);
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des op√©rations du jour');
    }
  }

  // M√âTHODE DE D√âBOGAGE
  async testEndpoints() {
    try {
      console.log('üîß Test des endpoints de transaction...');
      
      // Test simple avec collecteur ID = 1 (ajustez selon vos donn√©es)
      const testCollecteurId = 1;
      const response = await this.axios.get(`/mouvements/collecteur/${testCollecteurId}`);
      
      return {
        success: true,
        message: 'Endpoints de transaction fonctionnels',
        dataCount: response.data?.data?.length || 0
      };
    } catch (error) {
      console.error('‚ùå Erreur test endpoints:', error);
      return {
        success: false,
        error: error.message,
        details: error.response?.data || 'Pas de d√©tails'
      };
    }
  }
}

export default new TransactionService();