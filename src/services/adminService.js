// src/services/adminService.js - VERSION FINALE SANS DONN√âES MOCK√âES
import BaseApiService from './base/BaseApiService';

class AdminService extends BaseApiService {
  constructor() {
    super();
  }

  // ‚úÖ DASHBOARD ADMIN - ENDPOINT CORRIG√â
  async getDashboardStats() {
    try {
      console.log('üìä API: GET /admin/dashboard');
      const response = await this.axios.get('/admin/dashboard');
      return this.formatResponse(response, 'Dashboard admin r√©cup√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration du dashboard admin');
    }
  }

  // ‚úÖ GESTION DES COLLECTEURS - ENDPOINTS R√âELS
  async getCollecteurs({ page = 0, size = 20, search = '', agenceId = null } = {}) {
    try {
      console.log('üë• API: GET /collecteurs');
      const params = { page, size };
      if (search?.trim()) params.search = search.trim();
      if (agenceId) params.agenceId = agenceId;
      
      const response = await this.axios.get('/collecteurs', { params });
      return this.formatResponse(response, 'Collecteurs r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des collecteurs');
    }
  }

  async getCollecteurById(collecteurId) {
    try {
      console.log('üë§ API: GET /collecteurs/', collecteurId);
      const response = await this.axios.get(`/collecteurs/${collecteurId}`);
      return this.formatResponse(response, 'Collecteur r√©cup√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration du collecteur');
    }
  }

  async createCollecteur(collecteurData) {
    try {
      console.log('‚ûï API: POST /collecteurs', collecteurData);
      const response = await this.axios.post('/collecteurs', collecteurData);
      return this.formatResponse(response, 'Collecteur cr√©√© avec succ√®s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la cr√©ation du collecteur');
    }
  }

  async updateCollecteur(collecteurId, collecteurData) {
    try {
      console.log('üìù API: PUT /collecteurs/', collecteurId);
      const response = await this.axios.put(`/collecteurs/${collecteurId}`, collecteurData);
      return this.formatResponse(response, 'Collecteur mis √† jour');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la mise √† jour du collecteur');
    }
  }

  async toggleCollecteurStatus(collecteurId, newStatus) {
    try {
      console.log('üîÑ API: PUT /collecteurs/{}/status', collecteurId);
      const response = await this.axios.put(`/collecteurs/${collecteurId}/status`, {
        active: newStatus
      });
      return this.formatResponse(response, 'Statut collecteur mis √† jour');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors du changement de statut');
    }
  }

  async getCollecteurClients(collecteurId, { page = 0, size = 20, search = '' } = {}) {
    try {
      console.log('üë• API: GET /clients/collecteur/', collecteurId);
      const params = { page, size };
      if (search?.trim()) params.search = search.trim();
      
      const response = await this.axios.get(`/clients/collecteur/${collecteurId}`, { params });
      return this.formatResponse(response, 'Clients du collecteur r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des clients');
    }
  }

  // ‚úÖ GESTION DES AGENCES - ENDPOINTS R√âELS
  async getAgences({ page = 0, size = 20, search = '' } = {}) {
    try {
      console.log('üè¢ API: GET /agences');
      const params = { page, size };
      if (search?.trim()) params.search = search.trim();
      
      const response = await this.axios.get('/agences', { params });
      return this.formatResponse(response, 'Agences r√©cup√©r√©es');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des agences');
    }
  }

  async createAgence(agenceData) {
    try {
      console.log('‚ûï API: POST /agences', agenceData);
      const response = await this.axios.post('/agences', agenceData);
      return this.formatResponse(response, 'Agence cr√©√©e avec succ√®s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la cr√©ation de l\'agence');
    }
  }

  async updateAgence(agenceId, agenceData) {
    try {
      console.log('üìù API: PUT /agences/', agenceId);
      const response = await this.axios.put(`/agences/${agenceId}`, agenceData);
      return this.formatResponse(response, 'Agence mise √† jour');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la mise √† jour de l\'agence');
    }
  }

  async deleteAgence(agenceId) {
    try {
      console.log('üóëÔ∏è API: DELETE /agences/', agenceId);
      const response = await this.axios.delete(`/agences/${agenceId}`);
      return this.formatResponse(response, 'Agence supprim√©e');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la suppression de l\'agence');
    }
  }

  // ‚úÖ PARAM√àTRES DE COMMISSION - ENDPOINTS R√âELS
  async getCommissionParameters({ page = 0, size = 20 } = {}) {
    try {
      console.log('‚öôÔ∏è API: GET /commission-parameters');
      const params = { page, size };
      const response = await this.axios.get('/commission-parameters', { params });
      return this.formatResponse(response, 'Param√®tres de commission r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des param√®tres');
    }
  }

  async createCommissionParameter(parameterData) {
    try {
      console.log('‚ûï API: POST /commission-parameters', parameterData);
      const response = await this.axios.post('/commission-parameters', parameterData);
      return this.formatResponse(response, 'Param√®tre de commission cr√©√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la cr√©ation du param√®tre');
    }
  }

  async updateCommissionParameter(parameterId, parameterData) {
    try {
      console.log('üìù API: PUT /commission-parameters/', parameterId);
      const response = await this.axios.put(`/commission-parameters/${parameterId}`, parameterData);
      return this.formatResponse(response, 'Param√®tre mis √† jour');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la mise √† jour du param√®tre');
    }
  }

  async deleteCommissionParameter(parameterId) {
    try {
      console.log('üóëÔ∏è API: DELETE /commission-parameters/', parameterId);
      const response = await this.axios.delete(`/commission-parameters/${parameterId}`);
      return this.formatResponse(response, 'Param√®tre supprim√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la suppression du param√®tre');
    }
  }

  // ‚úÖ TRANSFERTS DE COMPTES - ENDPOINTS R√âELS
  async transferComptes(transferData) {
    try {
      console.log('üîÑ API: POST /transfers/collecteurs', transferData);
      const response = await this.axios.post('/transfers/collecteurs', transferData);
      return this.formatResponse(response, 'Transfert effectu√© avec succ√®s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors du transfert');
    }
  }

  async getTransferHistory({ page = 0, size = 20 } = {}) {
    try {
      console.log('üìã API: GET /transfers');
      const params = { page, size };
      const response = await this.axios.get('/transfers', { params });
      return this.formatResponse(response, 'Historique des transferts r√©cup√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration de l\'historique');
    }
  }

  async getTransferDetails(transferId) {
    try {
      console.log('üîç API: GET /transfers/', transferId);
      const response = await this.axios.get(`/transfers/${transferId}`);
      return this.formatResponse(response, 'D√©tails du transfert r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des d√©tails');
    }
  }

  // ‚úÖ RAPPORTS ET STATISTIQUES - ENDPOINTS R√âELS
  async generateReport(reportType, params = {}) {
    try {
      console.log('üìä API: POST /reports/generate', { reportType, ...params });
      const response = await this.axios.post('/reports/generate', {
        type: reportType,
        ...params
      });
      return this.formatResponse(response, 'Rapport g√©n√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la g√©n√©ration du rapport');
    }
  }

  async getReports({ page = 0, size = 20, type = null } = {}) {
    try {
      console.log('üìã API: GET /reports');
      const params = { page, size };
      if (type) params.type = type;
      
      const response = await this.axios.get('/reports', { params });
      return this.formatResponse(response, 'Rapports r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des rapports');
    }
  }

  async generateCollecteurReport(collecteurId, dateDebut, dateFin) {
    try {
      console.log('üìä API: GET /reports/collecteur/', collecteurId);
      const params = { dateDebut, dateFin };
      const response = await this.axios.get(`/reports/collecteur/${collecteurId}`, { 
        params,
        responseType: 'blob' // Pour t√©l√©charger le fichier
      });
      return this.formatResponse(response, 'Rapport collecteur g√©n√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la g√©n√©ration du rapport collecteur');
    }
  }

  async generateAgenceReport(agenceId, dateDebut, dateFin) {
    try {
      console.log('üìä API: GET /reports/agence/', agenceId);
      const params = { dateDebut, dateFin };
      const response = await this.axios.get(`/reports/agence/${agenceId}`, { 
        params,
        responseType: 'blob'
      });
      return this.formatResponse(response, 'Rapport agence g√©n√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la g√©n√©ration du rapport agence');
    }
  }

  // ‚úÖ GESTION DES UTILISATEURS ADMIN
  async getAdmins({ page = 0, size = 20, search = '' } = {}) {
    try {
      console.log('üë®‚Äçüíº API: GET /users/admins');
      const params = { page, size };
      if (search?.trim()) params.search = search.trim();
      
      const response = await this.axios.get('/users/admins', { params });
      return this.formatResponse(response, 'Administrateurs r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des administrateurs');
    }
  }

  async createAdmin(adminData) {
    try {
      console.log('‚ûï API: POST /users/admin', adminData);
      const response = await this.axios.post('/users/admin', adminData);
      return this.formatResponse(response, 'Administrateur cr√©√© avec succ√®s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la cr√©ation de l\'administrateur');
    }
  }

  async updateAdmin(adminId, adminData) {
    try {
      console.log('üìù API: PUT /users/admin/', adminId);
      const response = await this.axios.put(`/users/admin/${adminId}`, adminData);
      return this.formatResponse(response, 'Administrateur mis √† jour');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la mise √† jour de l\'administrateur');
    }
  }

  async deleteAdmin(adminId) {
    try {
      console.log('üóëÔ∏è API: DELETE /users/admin/', adminId);
      const response = await this.axios.delete(`/users/admin/${adminId}`);
      return this.formatResponse(response, 'Administrateur supprim√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la suppression de l\'administrateur');
    }
  }

  // ‚úÖ SANT√â DU SYST√àME
  async getSystemHealth() {
    try {
      console.log('üè• API: GET /admin/compte-health/check');
      const response = await this.axios.get('/admin/compte-health/check');
      return this.formatResponse(response, '√âtat du syst√®me r√©cup√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la v√©rification syst√®me');
    }
  }

  async fixCollecteurComptes(collecteurId) {
    try {
      console.log('üîß API: POST /admin/compte-health/fix/', collecteurId);
      const response = await this.axios.post(`/admin/compte-health/fix/${collecteurId}`);
      return this.formatResponse(response, 'Comptes corrig√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la correction');
    }
  }

  // ‚úÖ CACHE ET MAINTENANCE
  async clearCache() {
    try {
      console.log('üóëÔ∏è API: POST /admin/cache/clear-all');
      const response = await this.axios.post('/admin/cache/clear-all');
      return this.formatResponse(response, 'Cache vid√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors du vidage du cache');
    }
  }

  async getSystemLogs({ page = 0, size = 50, level = null } = {}) {
    try {
      console.log('üìã API: GET /admin/logs');
      const params = { page, size };
      if (level) params.level = level;
      
      const response = await this.axios.get('/admin/logs', { params });
      return this.formatResponse(response, 'Logs syst√®me r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des logs');
    }
  }

  // ‚úÖ STATISTIQUES AVANC√âES
  async getAdvancedStats(period = 'MONTH') {
    try {
      console.log('üìà API: GET /admin/stats/advanced');
      const params = { period };
      const response = await this.axios.get('/admin/stats/advanced', { params });
      return this.formatResponse(response, 'Statistiques avanc√©es r√©cup√©r√©es');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des statistiques avanc√©es');
    }
  }

  async getPerformanceMetrics() {
    try {
      console.log('‚ö° API: GET /admin/metrics/performance');
      const response = await this.axios.get('/admin/metrics/performance');
      return this.formatResponse(response, 'M√©triques de performance r√©cup√©r√©es');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des m√©triques');
    }
  }
}

export default new AdminService();