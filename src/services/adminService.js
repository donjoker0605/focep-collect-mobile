// src/services/adminService.js - SERVICE PRINCIPAL ADMIN
import BaseApiService from './base/BaseApiService';

class AdminService extends BaseApiService {
  constructor() {
    super();
  }

  // ‚úÖ DASHBOARD ADMIN - STATISTIQUES GLOBALES
  async getDashboardStats() {
    try {
      console.log('üìä API: GET /admin/dashboard');
      const response = await this.axios.get('/admin/dashboard');
      return this.formatResponse(response, 'Dashboard admin r√©cup√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration du dashboard admin');
    }
  }

  // ‚úÖ GESTION DES COLLECTEURS
  async getCollecteurs({ page = 0, size = 20, search = '', agenceId = null } = {}) {
    try {
      console.log('üë• API: GET /collecteurs');
      const params = { page, size };
      if (search?.trim()) params.search = search.trim();
      if (agenceId) params.agenceId = agenceId;
      
      const response = await this.axios.get('/collecteurs', { params });
      return this.formatResponse(response, 'Collecteurs r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des collecteurs');
    }
  }

  async createCollecteur(collecteurData) {
    try {
      console.log('‚ûï API: POST /collecteurs', collecteurData);
      const response = await this.axios.post('/collecteurs', collecteurData);
      return this.formatResponse(response, 'Collecteur cr√©√© avec succ√®s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la cr√©ation du collecteur');
    }
  }

  async updateCollecteur(collecteurId, collecteurData) {
    try {
      console.log('üìù API: PUT /collecteurs/', collecteurId);
      const response = await this.axios.put(`/collecteurs/${collecteurId}`, collecteurData);
      return this.formatResponse(response, 'Collecteur mis √† jour');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la mise √† jour du collecteur');
    }
  }

  async toggleCollecteurStatus(collecteurId, newStatus) {
    try {
      console.log('üîÑ API: PUT /collecteurs/{}/status', collecteurId);
      const response = await this.axios.put(`/collecteurs/${collecteurId}/status`, {
        active: newStatus
      });
      return this.formatResponse(response, 'Statut collecteur mis √† jour');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors du changement de statut');
    }
  }

  // ‚úÖ GESTION DES AGENCES
  async getAgences({ page = 0, size = 20, search = '' } = {}) {
    try {
      console.log('üè¢ API: GET /agences');
      const params = { page, size };
      if (search?.trim()) params.search = search.trim();
      
      const response = await this.axios.get('/agences', { params });
      return this.formatResponse(response, 'Agences r√©cup√©r√©es');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des agences');
    }
  }

  async createAgence(agenceData) {
    try {
      console.log('‚ûï API: POST /agences', agenceData);
      const response = await this.axios.post('/agences', agenceData);
      return this.formatResponse(response, 'Agence cr√©√©e avec succ√®s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la cr√©ation de l\'agence');
    }
  }

  // ‚úÖ PARAM√àTRES DE COMMISSION
  async getCommissionParameters({ page = 0, size = 20 } = {}) {
    try {
      console.log('‚öôÔ∏è API: GET /commission-parameters');
      const params = { page, size };
      const response = await this.axios.get('/commission-parameters', { params });
      return this.formatResponse(response, 'Param√®tres de commission r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des param√®tres');
    }
  }

  async createCommissionParameter(parameterData) {
    try {
      console.log('‚ûï API: POST /commission-parameters', parameterData);
      const response = await this.axios.post('/commission-parameters', parameterData);
      return this.formatResponse(response, 'Param√®tre de commission cr√©√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la cr√©ation du param√®tre');
    }
  }

  async updateCommissionParameter(parameterId, parameterData) {
    try {
      console.log('üìù API: PUT /commission-parameters/', parameterId);
      const response = await this.axios.put(`/commission-parameters/${parameterId}`, parameterData);
      return this.formatResponse(response, 'Param√®tre mis √† jour');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la mise √† jour du param√®tre');
    }
  }

  // ‚úÖ TRANSFERTS DE COMPTES
  async transferComptes(transferData) {
    try {
      console.log('üîÑ API: POST /transfers/collecteurs', transferData);
      const response = await this.axios.post('/transfers/collecteurs', transferData);
      return this.formatResponse(response, 'Transfert effectu√© avec succ√®s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors du transfert');
    }
  }

  async getTransferHistory({ page = 0, size = 20 } = {}) {
    try {
      console.log('üìã API: GET /transfers');
      const params = { page, size };
      const response = await this.axios.get('/transfers', { params });
      return this.formatResponse(response, 'Historique des transferts r√©cup√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration de l\'historique');
    }
  }

  // ‚úÖ RAPPORTS ET STATISTIQUES
  async generateReport(reportType, params = {}) {
    try {
      console.log('üìä API: POST /reports/generate', { reportType, ...params });
      const response = await this.axios.post('/reports/generate', {
        type: reportType,
        ...params
      });
      return this.formatResponse(response, 'Rapport g√©n√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la g√©n√©ration du rapport');
    }
  }

  async getReports({ page = 0, size = 20, type = null } = {}) {
    try {
      console.log('üìã API: GET /reports');
      const params = { page, size };
      if (type) params.type = type;
      
      const response = await this.axios.get('/reports', { params });
      return this.formatResponse(response, 'Rapports r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des rapports');
    }
  }

  // ‚úÖ SANT√â DU SYST√àME
  async getSystemHealth() {
    try {
      console.log('üè• API: GET /admin/compte-health/check');
      const response = await this.axios.get('/admin/compte-health/check');
      return this.formatResponse(response, '√âtat du syst√®me r√©cup√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la v√©rification syst√®me');
    }
  }

  async fixCollecteurComptes(collecteurId) {
    try {
      console.log('üîß API: POST /admin/compte-health/fix/', collecteurId);
      const response = await this.axios.post(`/admin/compte-health/fix/${collecteurId}`);
      return this.formatResponse(response, 'Comptes corrig√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la correction');
    }
  }

  // ‚úÖ CACHE ET MAINTENANCE
  async clearCache() {
    try {
      console.log('üóëÔ∏è API: POST /admin/cache/clear-all');
      const response = await this.axios.post('/admin/cache/clear-all');
      return this.formatResponse(response, 'Cache vid√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors du vidage du cache');
    }
  }
}

export default new AdminService();