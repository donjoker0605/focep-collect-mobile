// src/services/journalActiviteService.js
import BaseApiService from './base/BaseApiService';

class JournalActiviteService extends BaseApiService {
  constructor() {
    super();
  }

  /**
   * R√©cup√©rer les activit√©s d'un utilisateur pour une date
   */
  async getUserActivities(userId, date, { page = 0, size = 20, sortBy = 'timestamp', sortDir = 'desc' } = {}) {
    try {
      console.log('üìã API: GET /journal-activite/user/', userId);
      
      const params = {
        date: date, // Format YYYY-MM-DD
        page,
        size,
        sortBy,
        sortDir
      };
      
      const response = await this.axios.get(`/journal-activite/user/${userId}`, { params });
      return this.formatResponse(response, 'Activit√©s r√©cup√©r√©es');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des activit√©s');
    }
  }

  /**
   * R√©cup√©rer les activit√©s d'une agence pour une date
   */
  async getAgenceActivities(agenceId, date, { page = 0, size = 20, sortBy = 'timestamp', sortDir = 'desc' } = {}) {
    try {
      console.log('üìã API: GET /journal-activite/agence/', agenceId);
      
      const params = {
        date: date,
        page,
        size,
        sortBy,
        sortDir
      };
      
      const response = await this.axios.get(`/journal-activite/agence/${agenceId}`, { params });
      return this.formatResponse(response, 'Activit√©s de l\'agence r√©cup√©r√©es');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des activit√©s de l\'agence');
    }
  }

  /**
   * Recherche avanc√©e avec filtres
   */
  async searchActivities(filters, { page = 0, size = 20, sortBy = 'timestamp', sortDir = 'desc' } = {}) {
    try {
      console.log('üîç API: GET /journal-activite/search');
      
      const params = {
        ...filters,
        page,
        size,
        sortBy,
        sortDir
      };
      
      const response = await this.axios.get('/journal-activite/search', { params });
      return this.formatResponse(response, 'Recherche effectu√©e');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la recherche');
    }
  }

  /**
   * Statistiques d'activit√© pour un utilisateur
   */
  async getUserActivityStats(userId, dateDebut, dateFin) {
    try {
      console.log('üìä API: GET /journal-activite/stats/user/', userId);
      
      const params = {
        dateDebut,
        dateFin
      };
      
      const response = await this.axios.get(`/journal-activite/stats/user/${userId}`, { params });
      return this.formatResponse(response, 'Statistiques r√©cup√©r√©es');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des statistiques');
    }
  }

  /**
   * R√©cup√©rer les actions disponibles pour les filtres
   */
  async getAvailableActions() {
    try {
      console.log('üìã API: GET /journal-activite/actions');
      
      const response = await this.axios.get('/journal-activite/actions');
      return this.formatResponse(response, 'Actions r√©cup√©r√©es');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des actions');
    }
  }
}

export default new JournalActiviteService();