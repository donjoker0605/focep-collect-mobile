// src/services/geolocationService.js - VERSION CORRIG√âE ET SIMPLIFI√âE
import * as Location from 'expo-location';
import { Platform, Linking } from 'react-native';

class GeolocationService {
  constructor() {
    this.isLocationEnabled = false;
    this.hasPermission = false;
    this.lastKnownLocation = null;
  }

  /**
   * Initialisation du service avec v√©rification des permissions
   */
  async initialize() {
    console.log('üîß Initialisation GeolocationService...');
    
    try {
      // V√©rifier si les services de localisation sont activ√©s
      this.isLocationEnabled = await Location.hasServicesEnabledAsync();
      
      // V√©rifier les permissions
      const { status } = await Location.getForegroundPermissionsAsync();
      this.hasPermission = status === 'granted';
      
      console.log('‚úÖ GeolocationService initialis√©:', {
        locationEnabled: this.isLocationEnabled,
        hasPermission: this.hasPermission
      });
      
      return {
        locationEnabled: this.isLocationEnabled,
        hasPermission: this.hasPermission
      };
    } catch (error) {
      console.error('‚ùå Erreur initialisation GeolocationService:', error);
      return {
        locationEnabled: false,
        hasPermission: false,
        error: error.message
      };
    }
  }

  /**
   * Demander les permissions de g√©olocalisation avec gestion robuste
   */
  async requestPermissions() {
    console.log('üîí Demande permissions g√©olocalisation...');
    
    try {
      // V√©rifier d'abord si les services sont activ√©s
      const servicesEnabled = await Location.hasServicesEnabledAsync();
      if (!servicesEnabled) {
        throw new Error('Les services de localisation sont d√©sactiv√©s. Veuillez les activer dans les param√®tres.');
      }

      // Demander les permissions
      const { status } = await Location.requestForegroundPermissionsAsync();
      this.hasPermission = status === 'granted';
      
      if (!this.hasPermission) {
        // Analyser le type de refus
        if (status === 'denied') {
          throw new Error('Permission refus√©e. Veuillez autoriser l\'acc√®s √† la localisation.');
        } else if (status === 'undetermined') {
          throw new Error('Permission ind√©termin√©e. Veuillez r√©essayer.');
        }
      }
      
      console.log('‚úÖ Permissions obtenues:', this.hasPermission);
      return this.hasPermission;
      
    } catch (error) {
      console.error('‚ùå Erreur permissions:', error);
      throw error;
    }
  }

  /**
   * Obtenir la position actuelle avec fallback et retry
   */
  async getCurrentPosition(options = {}) {
    console.log('üìç Capture position GPS...');
    
    const defaultOptions = {
      accuracy: Location.Accuracy.High,
      timeout: 15000,
      maximumAge: 30000,
      ...options
    };

    try {
      // V√©rifier les pr√©requis
      if (!this.hasPermission) {
        const hasPermission = await this.requestPermissions();
        if (!hasPermission) {
          throw new Error('Permissions g√©olocalisation requises');
        }
      }

      // Tentative de capture
      const location = await Location.getCurrentPositionAsync(defaultOptions);

      const result = {
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
        accuracy: location.coords.accuracy,
        timestamp: location.timestamp,
        source: 'GPS'
      };

      this.lastKnownLocation = result;
      
      console.log('‚úÖ Position obtenue:', {
        lat: result.latitude.toFixed(6),
        lng: result.longitude.toFixed(6),
        accuracy: Math.round(result.accuracy || 0) + 'm'
      });
      
      return result;
      
    } catch (error) {
      console.error('‚ùå Erreur capture GPS:', error);
      throw this.createLocationError(error);
    }
  }

  /**
   * Obtenir position avec fallback progressif
   */
  async getCurrentPositionWithFallback() {
    console.log('üìç Capture GPS avec fallback...');
    
    const attempts = [
      { accuracy: Location.Accuracy.High, timeout: 15000 },
      { accuracy: Location.Accuracy.Balanced, timeout: 10000 },
      { accuracy: Location.Accuracy.Low, timeout: 8000 }
    ];

    for (let i = 0; i < attempts.length; i++) {
      try {
        console.log(`üîÑ Tentative ${i + 1}/${attempts.length}...`);
        return await this.getCurrentPosition(attempts[i]);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Tentative ${i + 1} √©chou√©e:`, error.message);
        
        if (i === attempts.length - 1) {
          throw error; // Derni√®re tentative √©chou√©e
        }
        
        // Attendre avant la prochaine tentative
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
  }

  /**
   * üî• NOUVEAU : Validation des coordonn√©es GPS pour le Cameroun
   */
  validateCoordinates(latitude, longitude) {
    if (latitude == null || longitude == null) {
      return { valid: false, error: 'Coordonn√©es nulles' };
    }
    
    if (typeof latitude !== 'number' || typeof longitude !== 'number') {
      return { valid: false, error: 'Coordonn√©es doivent √™tre des nombres' };
    }
    
    if (latitude < -90 || latitude > 90) {
      return { valid: false, error: 'Latitude invalide (doit √™tre entre -90 et 90)' };
    }
    
    if (longitude < -180 || longitude > 180) {
      return { valid: false, error: 'Longitude invalide (doit √™tre entre -180 et 180)' };
    }
    
    // Validation sp√©cifique au Cameroun
    const CAMEROON_BOUNDS = {
      minLat: 1.5, maxLat: 13.0,
      minLng: 8.0, maxLng: 16.5
    };
    
    let warning = null;
    if (latitude < CAMEROON_BOUNDS.minLat || latitude > CAMEROON_BOUNDS.maxLat ||
        longitude < CAMEROON_BOUNDS.minLng || longitude > CAMEROON_BOUNDS.maxLng) {
      warning = 'Ces coordonn√©es semblent √™tre en dehors du Cameroun. Voulez-vous continuer ?';
    }
    
    // V√©rifier les coordonn√©es nulles exactes (0,0) - Golfe de Guin√©e
    if (Math.abs(latitude) < 0.001 && Math.abs(longitude) < 0.001) {
      return { valid: false, error: 'Coordonn√©es (0,0) non autoris√©es' };
    }
    
    // Coordonn√©es de l'√©mulateur Android (Mountain View, CA)
    if (Math.abs(latitude - 37.4219983) < 0.001 && Math.abs(longitude - (-122.084))) {
      warning = 'Coordonn√©es de l\'√©mulateur d√©tect√©es (Mountain View, CA). Ceci est normal en d√©veloppement.';
    }
    
    return { valid: true, warning };
  }

  /**
   * G√©ocodage inverse avec gestion d'erreurs
   */
  async reverseGeocode(latitude, longitude) {
    console.log('üè† G√©ocodage inverse...');
    
    try {
      const validation = this.validateCoordinates(latitude, longitude);
      if (!validation.valid) {
        throw new Error(validation.error);
      }
      
      const addresses = await Location.reverseGeocodeAsync({ 
        latitude, 
        longitude 
      });
      
      if (addresses && addresses.length > 0) {
        const address = addresses[0];
        return {
          street: address.street,
          city: address.city,
          region: address.region,
          country: address.country,
          postalCode: address.postalCode,
          formattedAddress: this.formatAddress(address)
        };
      }
      
      return null;
      
    } catch (error) {
      console.error('‚ùå Erreur g√©ocodage inverse:', error);
      return null; // Non bloquant
    }
  }

  /**
   * Calculer la distance entre deux points (Haversine)
   */
  calculateDistance(lat1, lon1, lat2, lon2) {
    const R = 6371; // Rayon de la Terre en km
    const dLat = this.toRad(lat2 - lat1);
    const dLon = this.toRad(lon2 - lon1);
    
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(this.toRad(lat1)) * Math.cos(this.toRad(lat2)) *
              Math.sin(dLon/2) * Math.sin(dLon/2);
    
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c; // Distance en km
  }

  /**
   * Formatage d'adresse
   */
  formatAddress(address) {
    const parts = [];
    
    if (address.street) parts.push(address.street);
    if (address.city) parts.push(address.city);
    if (address.region) parts.push(address.region);
    if (address.country) parts.push(address.country);
    
    return parts.join(', ');
  }

  /**
   * Ouvrir les param√®tres de localisation
   */
  async openLocationSettings() {
    try {
      if (Platform.OS === 'ios') {
        await Linking.openURL('app-settings:');
      } else {
        await Linking.openSettings();
      }
    } catch (error) {
      console.error('‚ùå Erreur ouverture param√®tres:', error);
    }
  }

  /**
   * Cr√©er une erreur de localisation avec message explicite
   */
  createLocationError(error) {
    let message = 'Erreur de g√©olocalisation';
    let actionable = false;
    
    if (error.message) {
      if (error.message.includes('timeout')) {
        message = 'D√©lai d\'attente d√©pass√©. Assurez-vous d\'√™tre √† l\'ext√©rieur avec une bonne r√©ception GPS.';
      } else if (error.message.includes('permission') || error.message.includes('denied')) {
        message = 'Permission de localisation refus√©e. Veuillez l\'autoriser dans les param√®tres.';
        actionable = true;
      } else if (error.message.includes('disabled') || error.message.includes('services')) {
        message = 'Services de localisation d√©sactiv√©s. Veuillez les activer dans les param√®tres.';
        actionable = true;
      } else if (error.message.includes('unavailable') || error.message.includes('network')) {
        message = 'GPS indisponible. V√©rifiez votre connexion et r√©essayez.';
      } else {
        message = error.message;
      }
    }
    
    return {
      ...error,
      message,
      actionable,
      canRetry: !actionable
    };
  }

  /**
   * Obtenir le statut complet du service
   */
  async getStatus() {
    return {
      isLocationEnabled: await Location.hasServicesEnabledAsync(),
      hasPermission: this.hasPermission,
      lastKnownLocation: this.lastKnownLocation
    };
  }

  /**
   * Conversion degr√©s vers radians
   */
  toRad(degrees) {
    return degrees * (Math.PI / 180);
  }

  /**
   * Nettoyer les ressources
   */
  cleanup() {
    this.lastKnownLocation = null;
    console.log('üßπ GeolocationService nettoy√©');
  }
}

export default new GeolocationService();