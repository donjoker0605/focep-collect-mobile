// src/services/clientService.js - SERVICE COMPLET POUR LES CLIENTS
import BaseApiService from './base/BaseApiService';

class ClientService extends BaseApiService {
  constructor() {
    super();
  }

  /**
   * ‚úÖ R√âCUP√âRER TOUS LES CLIENTS DE L'AGENCE DE L'ADMIN CONNECT√â
   */
  async getAllClients({ page = 0, size = 20, search = '' } = {}) {
    try {
      console.log('üì± API: GET /clients');
      const params = { page, size };
      if (search?.trim()) params.search = search.trim();
      
      const response = await this.axios.get('/clients', { params });
      return this.formatResponse(response, 'Clients r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des clients');
    }
  }

  /**
   * ‚úÖ R√âCUP√âRER LES CLIENTS D'UN COLLECTEUR SP√âCIFIQUE
   */
  async getClientsByCollecteur(collecteurId, { page = 0, size = 20, search = '' } = {}) {
    try {
      console.log('üì± API: GET /clients/collecteur/', collecteurId);
      const params = { page, size };
      if (search?.trim()) params.search = search.trim();
      
      const response = await this.axios.get(`/clients/collecteur/${collecteurId}`, { params });
      return this.formatResponse(response, 'Clients du collecteur r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des clients du collecteur');
    }
  }

  /**
   * ‚úÖ R√âCUP√âRER UN CLIENT PAR ID
   */
  async getClientById(clientId) {
    try {
      console.log('üë§ API: GET /clients/', clientId);
      const response = await this.axios.get(`/clients/${clientId}`);
      return this.formatResponse(response, 'Client r√©cup√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration du client');
    }
  }

  /**
   * ‚úÖ CR√âER UN NOUVEAU CLIENT
   */
  async createClient(clientData) {
    try {
      console.log('‚ûï API: POST /clients', clientData);
      const response = await this.axios.post('/clients', clientData);
      return this.formatResponse(response, 'Client cr√©√© avec succ√®s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la cr√©ation du client');
    }
  }

  /**
   * ‚úÖ METTRE √Ä JOUR UN CLIENT
   */
  async updateClient(clientId, clientData) {
    try {
      console.log('üìù API: PUT /clients/', clientId);
      const response = await this.axios.put(`/clients/${clientId}`, clientData);
      return this.formatResponse(response, 'Client mis √† jour');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la mise √† jour du client');
    }
  }

  /**
   * ‚úÖ BASCULER LE STATUT DE VALIDATION D'UN CLIENT
   */
  async toggleClientStatus(clientId, newStatus) {
    try {
      console.log('üîÑ API: PATCH /clients/', clientId, '/toggle-status');
      const response = await this.axios.patch(`/clients/${clientId}/toggle-status`, {
        valide: newStatus
      });
      return this.formatResponse(response, 'Statut du client modifi√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors du changement de statut du client');
    }
  }

  /**
   * ‚úÖ SUPPRIMER UN CLIENT (D√âSACTIVATION)
   */
  async deleteClient(clientId) {
    try {
      console.log('üóëÔ∏è API: DELETE /clients/', clientId);
      const response = await this.axios.delete(`/clients/${clientId}`);
      return this.formatResponse(response, 'Client supprim√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la suppression du client');
    }
  }

  /**
   * ‚úÖ RECHERCHER DES CLIENTS
   */
  async searchClients(searchQuery, { page = 0, size = 20 } = {}) {
    try {
      console.log('üîç API: GET /clients/search');
      const params = { 
        q: searchQuery,
        page, 
        size 
      };
      
      const response = await this.axios.get('/clients/search', { params });
      return this.formatResponse(response, 'Recherche de clients effectu√©e');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la recherche de clients');
    }
  }

  /**
   * ‚úÖ R√âCUP√âRER LES COMPTES D'UN CLIENT
   */
  async getClientComptes(clientId) {
    try {
      console.log('üí≥ API: GET /clients/', clientId, '/comptes');
      const response = await this.axios.get(`/clients/${clientId}/comptes`);
      return this.formatResponse(response, 'Comptes du client r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des comptes');
    }
  }

  /**
   * ‚úÖ R√âCUP√âRER LES TRANSACTIONS D'UN CLIENT
   */
  async getClientTransactions(clientId, { page = 0, size = 10, type = null } = {}) {
    try {
      console.log('üìä API: GET /clients/', clientId, '/transactions');
      const params = { page, size };
      if (type) params.type = type;
      
      const response = await this.axios.get(`/clients/${clientId}/transactions`, { params });
      return this.formatResponse(response, 'Transactions du client r√©cup√©r√©es');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des transactions');
    }
  }

  /**
   * ‚úÖ R√âCUP√âRER LE SOLDE TOTAL D'UN CLIENT
   */
  async getClientBalance(clientId) {
    try {
      console.log('üí∞ API: GET /clients/', clientId, '/solde');
      const response = await this.axios.get(`/clients/${clientId}/solde`);
      return this.formatResponse(response, 'Solde du client r√©cup√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration du solde');
    }
  }

  /**
   * ‚úÖ R√âCUP√âRER LES STATISTIQUES D'UN CLIENT
   */
  async getClientStatistics(clientId) {
    try {
      console.log('üìà API: GET /clients/', clientId, '/statistics');
      const response = await this.axios.get(`/clients/${clientId}/statistics`);
      return this.formatResponse(response, 'Statistiques du client r√©cup√©r√©es');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des statistiques');
    }
  }

  /**
   * ‚úÖ TRANSF√âRER UN CLIENT VERS UN AUTRE COLLECTEUR
   */
  async transferClient(clientId, newCollecteurId, justification = '') {
    try {
      console.log('üîÑ API: POST /clients/', clientId, '/transfer');
      const response = await this.axios.post(`/clients/${clientId}/transfer`, {
        newCollecteurId,
        justification
      });
      return this.formatResponse(response, 'Client transf√©r√© avec succ√®s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors du transfert du client');
    }
  }

  /**
   * ‚úÖ VALIDER UN CLIENT (APPROUVER)
   */
  async validateClient(clientId) {
    try {
      console.log('‚úÖ API: POST /clients/', clientId, '/validate');
      const response = await this.axios.post(`/clients/${clientId}/validate`);
      return this.formatResponse(response, 'Client valid√© avec succ√®s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la validation du client');
    }
  }

  /**
   * ‚úÖ INVALIDER UN CLIENT (REJETER)
   */
  async invalidateClient(clientId, reason = '') {
    try {
      console.log('‚ùå API: POST /clients/', clientId, '/invalidate');
      const response = await this.axios.post(`/clients/${clientId}/invalidate`, {
        reason
      });
      return this.formatResponse(response, 'Client invalid√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de l\'invalidation du client');
    }
  }

  /**
   * ‚úÖ R√âCUP√âRER LES CLIENTS R√âCEMMENT CR√â√âS
   */
  async getRecentClients(days = 7) {
    try {
      console.log('üïê API: GET /clients/recent');
      const response = await this.axios.get('/clients/recent', {
        params: { days }
      });
      return this.formatResponse(response, 'Clients r√©cents r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des clients r√©cents');
    }
  }

  /**
   * ‚úÖ R√âCUP√âRER LES CLIENTS PAR STATUT
   */
  async getClientsByStatus(status, { page = 0, size = 20 } = {}) {
    try {
      console.log('üìã API: GET /clients/status/', status);
      const params = { page, size };
      
      const response = await this.axios.get(`/clients/status/${status}`, { params });
      return this.formatResponse(response, `Clients ${status} r√©cup√©r√©s`);
    } catch (error) {
      throw this.handleError(error, `Erreur lors de la r√©cup√©ration des clients ${status}`);
    }
  }

  /**
   * ‚úÖ EXPORTER LES CLIENTS EN CSV
   */
  async exportClients(format = 'csv', filters = {}) {
    try {
      console.log('üì• API: GET /clients/export');
      const params = { format, ...filters };
      
      const response = await this.axios.get('/clients/export', { 
        params,
        responseType: 'blob' 
      });
      
      return this.formatResponse(response, 'Clients export√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de l\'exportation des clients');
    }
  }

  /**
   * ‚úÖ IMPORTER DES CLIENTS DEPUIS UN FICHIER
   */
  async importClients(file, collecteurId) {
    try {
      console.log('üì§ API: POST /clients/import');
      
      const formData = new FormData();
      formData.append('file', file);
      formData.append('collecteurId', collecteurId);
      
      const response = await this.axios.post('/clients/import', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      
      return this.formatResponse(response, 'Clients import√©s avec succ√®s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de l\'importation des clients');
    }
  }

  /**
   * ‚úÖ R√âCUP√âRER LES STATISTIQUES GLOBALES DES CLIENTS
   */
  async getClientsStatistics() {
    try {
      console.log('üìä API: GET /clients/statistics');
      const response = await this.axios.get('/clients/statistics');
      return this.formatResponse(response, 'Statistiques des clients r√©cup√©r√©es');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des statistiques');
    }
  }

  /**
   * ‚úÖ FILTRER LES CLIENTS PAR CRIT√àRES MULTIPLES
   */
  async filterClients(filters = {}) {
    try {
      console.log('üîΩ API: POST /clients/filter');
      const response = await this.axios.post('/clients/filter', filters);
      return this.formatResponse(response, 'Clients filtr√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors du filtrage des clients');
    }
  }
}

export default new ClientService();