// src/services/clientService.js
import BaseApiService from './base/BaseApiService';

class ClientService extends BaseApiService {
  constructor() {
    super();
  }

  /**
   * R√©cup√©rer tous les clients (filtr√©s par agence c√¥t√© backend)
   */
  async getAllClients({ page = 0, size = 20, search = '' } = {}) {
    try {
      console.log('üì± API: GET /clients');
      const params = { page, size };
      if (search?.trim()) params.search = search.trim();
      
      const response = await this.axios.get('/clients', { params });
      return this.formatResponse(response, 'Clients r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des clients');
    }
  }

  /**
   * R√©cup√©rer un client par son ID
   */
  async getClientById(clientId) {
    try {
      console.log('üì± API: GET /clients/', clientId);
      const response = await this.axios.get(`/clients/${clientId}`);
      return this.formatResponse(response, 'Client r√©cup√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration du client');
    }
  }

  /**
   * Cr√©er un nouveau client
   */
  async createClient(clientData) {
    try {
      console.log('üì± API: POST /clients');
      const response = await this.axios.post('/clients', clientData);
      return this.formatResponse(response, 'Client cr√©√© avec succ√®s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la cr√©ation du client');
    }
  }

  /**
   * Mettre √† jour un client
   */
  async updateClient(clientId, clientData) {
    try {
      console.log('üì± API: PUT /clients/', clientId);
      const response = await this.axios.put(`/clients/${clientId}`, clientData);
      return this.formatResponse(response, 'Client mis √† jour');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la mise √† jour');
    }
  }

  /**
   * Basculer le statut actif/inactif d'un client
   */
  async toggleClientStatus(clientId, newStatus) {
    try {
      console.log('üì± API: PATCH /clients/toggle-status/', clientId);
      const response = await this.axios.patch(`/clients/${clientId}/toggle-status`, {
        valide: newStatus
      });
      return this.formatResponse(response, 'Statut modifi√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors du changement de statut');
    }
  }

  /**
   * R√©cup√©rer les clients d'un collecteur
   */
	 async getClientsByCollecteur(collecteurId, params = {}) {
	  try {
		console.log('üì± API: GET /clients/collecteur/', collecteurId);
		const response = await this.axios.get(`/clients/collecteur/${collecteurId}`, { params });
		return this.formatResponse(response, 'Clients du collecteur r√©cup√©r√©s');
	  } catch (error) {
		throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des clients');
	  }
	}

  /**
   * Rechercher des clients
   */
  async searchClients(searchQuery) {
    try {
      console.log('üì± API: GET /clients/search');
      const response = await this.axios.get('/clients/search', {
        params: { q: searchQuery }
      });
      return this.formatResponse(response, 'Recherche effectu√©e');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la recherche');
    }
  }
  
	async getClientWithTransactions(clientId) {
		try {
			console.log('üì± API: GET /clients/', clientId, '/with-transactions');
			const response = await this.axios.get(`/clients/${clientId}/with-transactions`);
			return this.formatResponse(response, 'D√©tails client r√©cup√©r√©s');
		} catch (error) {
			throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des d√©tails du client');
		}
	}

  /**
   * R√©cup√©rer l'historique des transactions d'un client
   */
  async getClientTransactions(clientId, params = {}) {
    try {
      console.log('üì± API: GET /clients/transactions/', clientId);
      const response = await this.axios.get(`/clients/${clientId}/transactions`, { params });
      return this.formatResponse(response, 'Transactions r√©cup√©r√©es');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des transactions');
    }
  }

  /**
   * R√©cup√©rer les statistiques d'un client
   */
  async getClientStatistics(clientId) {
    try {
      console.log('üì± API: GET /clients/statistics/', clientId);
      const response = await this.axios.get(`/clients/${clientId}/statistics`);
      return this.formatResponse(response, 'Statistiques r√©cup√©r√©es');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des statistiques');
    }
  }

  /**
   * Valider un client
   */
  async validateClient(clientId) {
    try {
      console.log('üì± API: POST /clients/validate/', clientId);
      const response = await this.axios.post(`/clients/${clientId}/validate`);
      return this.formatResponse(response, 'Client valid√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la validation');
    }
  }

  /**
   * Transf√©rer un client vers un autre collecteur
   */
  async transferClient(clientId, newCollecteurId) {
    try {
      console.log('üì± API: POST /clients/transfer/', clientId);
      const response = await this.axios.post(`/clients/${clientId}/transfer`, {
        newCollecteurId
      });
      return this.formatResponse(response, 'Client transf√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors du transfert');
    }
  }

  /**
   * R√©cup√©rer le solde d'un client
   */
  async getClientBalance(clientId) {
    try {
      console.log('üì± API: GET /clients/balance/', clientId);
      const response = await this.axios.get(`/clients/${clientId}/balance`);
      return this.formatResponse(response, 'Solde r√©cup√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration du solde');
    }
  }

  /**
   * R√©cup√©rer les clients avec des op√©rations r√©centes
   */
  async getClientsWithRecentActivity(days = 7) {
    try {
      console.log('üì± API: GET /clients/recent-activity');
      const response = await this.axios.get('/clients/recent-activity', {
        params: { days }
      });
      return this.formatResponse(response, 'Clients actifs r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration');
    }
  }

  /**
   * R√©cup√©rer les meilleurs clients (par √©pargne)
   */
  async getTopClients(limit = 10) {
    try {
      console.log('üì± API: GET /clients/top');
      const response = await this.axios.get('/clients/top', {
        params: { limit }
      });
      return this.formatResponse(response, 'Meilleurs clients r√©cup√©r√©s');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration');
    }
  }

  /**
   * Exporter la liste des clients
   */
  async exportClients(format = 'excel', filters = {}) {
    try {
      console.log('üì± API: GET /clients/export');
      const response = await this.axios.get('/clients/export', {
        params: { format, ...filters },
        responseType: 'blob'
      });
      return this.formatResponse(response, 'Export g√©n√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de l\'export');
    }
  }

  /**
   * R√©cup√©rer le r√©sum√© des clients pour le dashboard
   */
  async getClientsSummary() {
    try {
      console.log('üì± API: GET /clients/summary');
      const response = await this.axios.get('/clients/summary');
      return this.formatResponse(response, 'R√©sum√© r√©cup√©r√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration du r√©sum√©');
    }
  }

  /**
   * Supprimer un client (soft delete)
   */
  async deleteClient(clientId) {
    try {
      console.log('üì± API: DELETE /clients/', clientId);
      const response = await this.axios.delete(`/clients/${clientId}`);
      return this.formatResponse(response, 'Client supprim√©');
    } catch (error) {
      throw this.handleError(error, 'Erreur lors de la suppression');
    }
	
	// Nouvelle m√©thode pour mettre √† jour la localisation
	async updateClientLocation(clientId, locationData) {
	  try {
		console.log('üìç Mise √† jour localisation client:', clientId);
		
		const response = await this.axios.put(
		  `/clients/${clientId}/location`, 
		  locationData
		);
		
		return this.formatResponse(response, 'Localisation mise √† jour');
	  } catch (error) {
		throw this.handleError(error, 'Erreur mise √† jour localisation');
	  }
	}

	// Nouvelle m√©thode pour obtenir la localisation
	async getClientLocation(clientId) {
	  try {
		const response = await this.axios.get(`/clients/${clientId}/location`);
		return this.formatResponse(response, 'Localisation r√©cup√©r√©e');
	  } catch (error) {
		throw this.handleError(error, 'Erreur r√©cup√©ration localisation');
	  }
	}

	// Nouvelle m√©thode pour obtenir les clients proches
	async getNearbyClients(latitude, longitude, radiusKm = 5) {
	  try {
		const params = { latitude, longitude, radiusKm };
		const response = await this.axios.get('/clients/location/nearby', { params });
		return this.formatResponse(response, 'Clients proches r√©cup√©r√©s');
	  } catch (error) {
		throw this.handleError(error, 'Erreur recherche clients proches');
	  }
	}
  }
  

export default new ClientService();