// src/services/adminNotificationService.js - CORRECTION CRITIQUE DES URLs
import BaseApiService from './base/BaseApiService';

class AdminNotificationService extends BaseApiService {
  constructor() {
    super();
    
    // Cache pour am√©liorer les performances
    this.cache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 minutes
  }

  // ===================================================
  // üìä DASHBOARD ADMIN
  // ===================================================

  /**
   * üìä Dashboard principal
   */
  async getDashboard() {
    try {
      // ‚ùå AVANT: '/api/admin/notifications/dashboard' (double /api/)
      // ‚úÖ APR√àS: '/admin/notifications/dashboard' (baseURL d√©j√† /api/)
      console.log('üìä API: GET /admin/notifications/dashboard');
      
      const response = await this.axios.get('/admin/notifications/dashboard');
      return this.formatResponse(response, 'Dashboard r√©cup√©r√©');

    } catch (error) {
      throw this.handleError(error, 'Erreur dashboard admin');
    }
  }

  /**
   * üö® Notifications critiques
   */
  async getCriticalNotifications() {
    try {
      console.log('üö® API: GET /admin/notifications/critical');
      
      const response = await this.axios.get('/admin/notifications/critical');
      return this.formatResponse(response, 'Notifications critiques r√©cup√©r√©es');

    } catch (error) {
      throw this.handleError(error, 'Erreur notifications critiques');
    }
  }

  /**
   * üî¢ Statistiques
   */
  async getStats() {
    try {
      console.log('üî¢ API: GET /admin/notifications/stats');
      
      const response = await this.axios.get('/admin/notifications/stats');
      return this.formatResponse(response, 'Statistiques r√©cup√©r√©es');

    } catch (error) {
      throw this.handleError(error, 'Erreur statistiques');
    }
  }

  // ===================================================
  // üìã GESTION DES NOTIFICATIONS
  // ===================================================

  /**
   * üìã Liste pagin√©e des notifications
   */
  async getAllNotifications({
    page = 0,
    size = 20,
    sort = 'dateCreation',
    direction = 'desc',
    type = null,
    priority = null,
    unreadOnly = false
  } = {}) {
    try {
      console.log('üìã API: GET /admin/notifications');
      
      const params = {
        page,
        size,
        sort,
        direction,
        unreadOnly
      };
      
      if (type) params.type = type;
      if (priority) params.priority = priority;

      const response = await this.axios.get('/admin/notifications', { params });
      return this.formatResponse(response, 'Notifications r√©cup√©r√©es');

    } catch (error) {
      throw this.handleError(error, 'Erreur r√©cup√©ration notifications');
    }
  }

  /**
   * ‚úÖ Marquer notification comme lue
   */
  async markAsRead(notificationId) {
    try {
      console.log('‚úÖ API: PUT /admin/notifications/', notificationId, '/read');
      
      const response = await this.axios.put(`/admin/notifications/${notificationId}/read`);
      
      // Invalider le cache
      this.invalidateCache(['dashboard', 'critical', 'stats']);
      
      return this.formatResponse(response, 'Notification marqu√©e comme lue');

    } catch (error) {
      throw this.handleError(error, 'Erreur marquage lecture');
    }
  }

  /**
   * ‚úÖ Marquer toutes comme lues
   */
  async markAllAsRead() {
    try {
      console.log('‚úÖ API: PUT /admin/notifications/read-all');
      
      const response = await this.axios.put('/admin/notifications/read-all');
      
      // Invalider tout le cache
      this.cache.clear();
      
      return this.formatResponse(response, 'Toutes notifications marqu√©es comme lues');

    } catch (error) {
      throw this.handleError(error, 'Erreur marquage global');
    }
  }

  /**
   * üóëÔ∏è Supprimer notification
   */
  async deleteNotification(notificationId) {
    try {
      console.log('üóëÔ∏è API: DELETE /admin/notifications/', notificationId);
      
      const response = await this.axios.delete(`/admin/notifications/${notificationId}`);
      
      // Invalider le cache
      this.invalidateCache(['dashboard', 'critical', 'stats']);
      
      return this.formatResponse(response, 'Notification supprim√©e');

    } catch (error) {
      throw this.handleError(error, 'Erreur suppression notification');
    }
  }

  // ===================================================
  // üî¢ COMPTEURS ET M√âTRIQUES
  // ===================================================

  /**
   * üî¢ Nombre notifications non lues
   */
  async getUnreadCount() {
    try {
      console.log('üî¢ API: GET /admin/notifications/unread-count');
      
      const response = await this.axios.get('/admin/notifications/unread-count');
      return this.formatResponse(response, 'Compteur r√©cup√©r√©');

    } catch (error) {
      throw this.handleError(error, 'Erreur comptage');
    }
  }

  /**
   * üî¢ Nombre notifications critiques
   */
  async getCriticalCount() {
    try {
      console.log('üî¢ API: GET /admin/notifications/critical-count');
      
      const response = await this.axios.get('/admin/notifications/critical-count');
      return this.formatResponse(response, 'Compteur critiques r√©cup√©r√©');

    } catch (error) {
      throw this.handleError(error, 'Erreur comptage critiques');
    }
  }

  // ===================================================
  // üîç FILTRES ET RECHERCHE
  // ===================================================

  /**
   * üîç Notifications par collecteur
   */
  async getNotificationsByCollecteur(collecteurId) {
    try {
      console.log('üîç API: GET /admin/notifications/collecteur/', collecteurId);
      
      const response = await this.axios.get(`/admin/notifications/collecteur/${collecteurId}`);
      return this.formatResponse(response, 'Notifications collecteur r√©cup√©r√©es');

    } catch (error) {
      throw this.handleError(error, 'Erreur notifications collecteur');
    }
  }

  /**
   * üîç Notifications par p√©riode
   */
  async getNotificationsByPeriod(dateDebut, dateFin) {
    try {
      console.log('üîç API: GET /admin/notifications/period');
      
      const params = new URLSearchParams({
        dateDebut: dateDebut.toISOString(),
        dateFin: dateFin.toISOString()
      });

      const response = await this.axios.get(`/admin/notifications/period?${params}`);
      return this.formatResponse(response, 'Notifications p√©riode r√©cup√©r√©es');

    } catch (error) {
      throw this.handleError(error, 'Erreur notifications p√©riode');
    }
  }

  // ===================================================
  // ‚öôÔ∏è CONFIGURATION
  // ===================================================

  /**
   * ‚öôÔ∏è R√©cup√©rer configuration
   */
  async getSettings() {
    try {
      console.log('‚öôÔ∏è API: GET /admin/notifications/settings');
      
      const response = await this.axios.get('/admin/notifications/settings');
      return this.formatResponse(response, 'Configuration r√©cup√©r√©e');

    } catch (error) {
      throw this.handleError(error, 'Erreur configuration');
    }
  }

  /**
   * ‚öôÔ∏è Mettre √† jour configuration
   */
  async updateSettings(settings) {
    try {
      console.log('‚öôÔ∏è API: PUT /admin/notifications/settings');
      
      const response = await this.axios.put('/admin/notifications/settings', settings);
      return this.formatResponse(response, 'Configuration mise √† jour');

    } catch (error) {
      throw this.handleError(error, 'Erreur mise √† jour configuration');
    }
  }

  // ===================================================
  // üß™ TESTS ET MAINTENANCE
  // ===================================================

  /**
   * üß™ Cr√©er notification de test
   */
  async createTestNotification(testData) {
    try {
      console.log('üß™ API: POST /admin/notifications/test');
      
      const response = await this.axios.post('/admin/notifications/test', testData);
      
      // Invalider le cache pour forcer le rafra√Æchissement
      this.invalidateCache(['dashboard', 'critical']);
      
      return this.formatResponse(response, 'Notification test cr√©√©e');

    } catch (error) {
      throw this.handleError(error, 'Erreur cr√©ation notification test');
    }
  }

  /**
   * üìß Renvoyer email notification
   */
  async resendEmail(notificationId) {
    try {
      console.log('üìß API: POST /admin/notifications/', notificationId, '/resend-email');
      
      const response = await this.axios.post(`/admin/notifications/${notificationId}/resend-email`);
      return this.formatResponse(response, 'Email renvoy√©');

    } catch (error) {
      throw this.handleError(error, 'Erreur renvoi email');
    }
  }

  /**
   * üßπ Nettoyer anciennes notifications
   */
  async cleanupOldNotifications(daysOld = 30) {
    try {
      console.log('üßπ API: DELETE /admin/notifications/cleanup');
      
      const response = await this.axios.delete('/admin/notifications/cleanup', {
        params: { daysOld }
      });
      
      // Invalider tout le cache
      this.cache.clear();
      
      return this.formatResponse(response, 'Nettoyage effectu√©');

    } catch (error) {
      throw this.handleError(error, 'Erreur nettoyage');
    }
  }

  // ===================================================
  // üîß UTILITAIRES CACHE
  // ===================================================

  /**
   * Invalider certaines cl√©s du cache
   */
  invalidateCache(keys) {
    keys.forEach(key => {
      this.cache.delete(key);
    });
  }

  /**
   * V√©rifier si une donn√©e en cache est encore valide
   */
  isCacheValid(key) {
    const cached = this.cache.get(key);
    if (!cached) return false;
    
    return (Date.now() - cached.timestamp) < this.cacheTimeout;
  }

  /**
   * Mettre en cache avec timestamp
   */
  setCache(key, data) {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
  }

  /**
   * R√©cup√©rer du cache si valide
   */
  getCache(key) {
    if (this.isCacheValid(key)) {
      return this.cache.get(key).data;
    }
    return null;
  }

  // ===================================================
  // üîÑ POLLING INTELLIGENT (M√âTHODE MANQUANTE)
  // ===================================================

  /**
   * üîÑ D√©marrer le polling intelligent des notifications
   */
  startIntelligentPolling(callback, options = {}) {
    const defaultOptions = {
      initialDelay: 2000,       // 2 secondes avant le premier poll
      normalInterval: 30000,    // 30 secondes normalement
      activeInterval: 10000,    // 10 secondes si activit√©
      maxRetries: 3,
      retryDelay: 5000
    };

    const config = { ...defaultOptions, ...options };
    
    console.log('üîÑ D√©marrage polling intelligent admin notifications');
    
    let retryCount = 0;
    let currentInterval = config.normalInterval;
    let isPolling = false;

    const poll = async () => {
      if (isPolling) return; // √âviter les appels multiples
      
      isPolling = true;
      
      try {
        console.log('üîÑ Ex√©cution polling dashboard admin...');
        console.log(`‚è∞ Prochain polling admin dans ${currentInterval/1000}s`);
        
        // R√©cup√©rer dashboard et notifications critiques
        const [dashboardResult, criticalResult] = await Promise.allSettled([
          this.getDashboard(),
          this.getCriticalNotifications()
        ]);

        const hasError = dashboardResult.status === 'rejected' || criticalResult.status === 'rejected';
        
        if (hasError) {
          retryCount++;
          console.warn(`‚ö†Ô∏è Circuit breaker √©chec ${retryCount}/${config.maxRetries}`);
          
          if (retryCount >= config.maxRetries) {
            console.error(`‚ö° Circuit breaker -> OPEN (${retryCount} √©checs) - r√©ouverture dans ${config.retryDelay/1000}s`);
            this.stopIntelligentPolling();
            return;
          }
          
          // Retry avec d√©lai
          setTimeout(poll, config.retryDelay);
          return;
        }

        // Reset retry count on success
        retryCount = 0;
        
        // ‚úÖ CORRECTION : Appeler le callback avec la structure attendue par le screen
        if (callback && dashboardResult.status === 'fulfilled') {
          callback(dashboardResult.value);
        }

        // Programmer le prochain poll
        this.pollingTimeout = setTimeout(poll, currentInterval);
        
      } catch (error) {
        console.error('‚ùå Erreur polling dashboard:', error);
        retryCount++;
        
        if (retryCount < config.maxRetries) {
          setTimeout(poll, config.retryDelay);
        } else {
          this.stopIntelligentPolling();
        }
      } finally {
        isPolling = false;
      }
    };

    // D√©marrer le polling apr√®s le d√©lai initial
    this.pollingTimeout = setTimeout(poll, config.initialDelay);
    
    return {
      stop: () => this.stopIntelligentPolling(),
      changeInterval: (newInterval) => {
        currentInterval = newInterval;
        console.log(`üîÑ Intervalle polling chang√©: ${newInterval}ms`);
      }
    };
  }

  /**
   * ‚èπÔ∏è Arr√™ter le polling intelligent
   */
  stopIntelligentPolling() {
    if (this.pollingTimeout) {
      clearTimeout(this.pollingTimeout);
      this.pollingTimeout = null;
      console.log('‚èπÔ∏è Arr√™t polling admin notifications');
    }
  }

  /**
   * üîÑ V√©rifier si le polling est actif
   */
  isPollingActive() {
    return !!this.pollingTimeout;
  }

  // ‚úÖ ALIAS POUR COMPATIBILIT√â AVEC L'ANCIEN CODE
  stopPolling() {
    return this.stopIntelligentPolling();
  }
}

export default new AdminNotificationService();