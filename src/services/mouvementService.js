import BaseApiService from './base/BaseApiService';

class MouvementService extends BaseApiService {
  constructor() {
    super();
  }

  // ‚úÖ √âPARGNE AVEC JOURNAL AUTOMATIQUE
  async enregistrerEpargne(data) {
    try {
      console.log('üí∞ Enregistrement √©pargne avec journal automatique:', data);
      
      // ‚úÖ PLUS BESOIN DE PASSER LE JOURNAL - IL EST CR√â√â AUTOMATIQUEMENT
      const response = await this.axios.post('/mouvements/epargne', {
        clientId: data.clientId,
        collecteurId: data.collecteurId,
        montant: data.montant,
      }, { canQueue: true });
      
      return this.formatResponse(response, '√âpargne enregistr√©e avec succ√®s');
    } catch (error) {
      console.error('Erreur lors de l\'enregistrement de l\'√©pargne:', error);
      throw this.handleError(error, 'Erreur lors de l\'enregistrement de l\'√©pargne');
    }
  }

  // ‚úÖ RETRAIT AVEC JOURNAL AUTOMATIQUE
  async effectuerRetrait(data) {
    try {
      console.log('üèß Effectuation retrait avec journal automatique:', data);
      
      const response = await this.axios.post('/mouvements/retrait', {
        clientId: data.clientId,
        collecteurId: data.collecteurId,
        montant: data.montant,
        // journalId: PAS BESOIN - G√âR√â AUTOMATIQUEMENT C√îT√â BACKEND
      }, { canQueue: true });
      
      return this.formatResponse(response, 'Retrait effectu√© avec succ√®s');
    } catch (error) {
      console.error('Erreur lors de l\'effectuation du retrait:', error);
      throw this.handleError(error, 'Erreur lors du retrait');
    }
  }

  // ‚úÖ R√âCUP√âRATION DES OP√âRATIONS DU JOUR POUR UN COLLECTEUR
  async getOperationsDuJour(collecteurId, date = null) {
    try {
      const dateParam = date || new Date().toISOString().split('T')[0];
      console.log('üìä R√©cup√©ration op√©rations du jour:', collecteurId, dateParam);
      
      const response = await this.axios.get(`/mouvements/collecteur/${collecteurId}/jour`, {
        params: { date: dateParam }
      }, {
        useCache: true,
        maxAge: 2 * 60 * 1000 // 2 minutes de cache
      });
      
      return this.formatResponse(response, 'Op√©rations du jour r√©cup√©r√©es');
    } catch (error) {
      console.error('Erreur r√©cup√©ration op√©rations du jour:', error);
      throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des op√©rations du jour');
    }
  }

  // M√âTHODES EXISTANTES CONSERV√âES
  async getMouvementsByJournal(journalId) {
    try {
      const response = await this.axios.get(`/mouvements/journal/${journalId}`, {}, {
        useCache: true,
        maxAge: 30 * 60 * 1000 // 30 minutes
      });
      
      return this.formatResponse(response, 'Mouvements r√©cup√©r√©s');
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des mouvements:', error);
      return this.handleError(error, 'Erreur lors de la r√©cup√©ration des mouvements');
    }
  }

  async getMouvementsByClient(clientId, dateDebut, dateFin) {
    try {
      const params = {};
      if (dateDebut) params.dateDebut = dateDebut;
      if (dateFin) params.dateFin = dateFin;
      
      const response = await this.axios.get(`/mouvements/client/${clientId}`, { params }, {
        useCache: true,
        maxAge: 30 * 60 * 1000 // 30 minutes
      });
      
      return this.formatResponse(response, 'Mouvements client r√©cup√©r√©s');
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des mouvements client:', error);
      return this.handleError(error, 'Erreur lors de la r√©cup√©ration des mouvements client');
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: V√©rification du solde avant retrait
  async verifierSoldeRetrait(clientId, montant) {
    try {
      const response = await this.axios.post('/mouvements/verify-balance', {
        clientId,
        montant
      });
      
      return this.formatResponse(response, 'Solde v√©rifi√©');
    } catch (error) {
      console.error('Erreur v√©rification solde:', error);
      throw this.handleError(error, 'Erreur lors de la v√©rification du solde');
    }
  }
  
  async getOperationsDuJour(collecteurId, date = null) {
  try {
    const dateParam = date || new Date().toISOString().split('T')[0];
    console.log('üìä R√©cup√©ration op√©rations du jour:', collecteurId, dateParam);
    
    // ‚úÖ NOUVEAU ENDPOINT qui g√®re tout automatiquement
    const response = await this.axios.get(`/mouvements/collecteur/${collecteurId}/jour`, {
      params: { date: dateParam }
    }, {
      useCache: true,
      maxAge: 2 * 60 * 1000 // 2 minutes de cache
    });
    
    return this.formatResponse(response, 'Op√©rations du jour r√©cup√©r√©es');
  } catch (error) {
    console.error('Erreur r√©cup√©ration op√©rations du jour:', error);
    throw this.handleError(error, 'Erreur lors de la r√©cup√©ration des op√©rations du jour');
  }
}
}

export default new MouvementService();